vector<int> build_lps(string s)
{
    int n = s.length();
    vector<int> lps(n);
    lps[0] = 0;
    int i = 1, len = 0;
    while(i < n)
    {
        if(s[len] == s[i])
        {
            lps[i] = len + 1;
            len ++; i++;
        }
        else
        {
            if(len == 0)
            {
                lps[i] = 0;
                i++;
            }
            else
            {
                len = lps[len - 1];
            }
        }
    }
    return lps;
}
int Solution::solve(string pat) {
    vector<int> lps = build_lps(pat);
    int n = pat.length();
    string text = pat;
    reverse(text.begin(), text.end());
    int i = 0, len = 0;
    while(i < n)
    {
        if(pat[len] == text[i])i++, len++;
        if(len == n)return 0;
        else if(i < n && pat[len] != text[i])
        {
            if(len == 0)i++;
            else
            len = lps[len - 1];
        }
    }
    return n - len;
}
